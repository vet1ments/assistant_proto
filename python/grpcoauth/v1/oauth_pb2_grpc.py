# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from grpcoauth.v1 import oauth_pb2 as grpcoauth_dot_v1_dot_oauth__pb2


class Oauth2ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAuthorizeCode = channel.unary_unary(
                '/grpcoauth.v1.Oauth2Service/GetAuthorizeCode',
                request_serializer=grpcoauth_dot_v1_dot_oauth__pb2.GetAuthorizeCodeRequest.SerializeToString,
                response_deserializer=grpcoauth_dot_v1_dot_oauth__pb2.GetAuthorizeCodeResponse.FromString,
                _registered_method=True)
        self.GetToken = channel.unary_unary(
                '/grpcoauth.v1.Oauth2Service/GetToken',
                request_serializer=grpcoauth_dot_v1_dot_oauth__pb2.GetTokenRequest.SerializeToString,
                response_deserializer=grpcoauth_dot_v1_dot_oauth__pb2.GetTokenResponse.FromString,
                _registered_method=True)


class Oauth2ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAuthorizeCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Oauth2ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAuthorizeCode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAuthorizeCode,
                    request_deserializer=grpcoauth_dot_v1_dot_oauth__pb2.GetAuthorizeCodeRequest.FromString,
                    response_serializer=grpcoauth_dot_v1_dot_oauth__pb2.GetAuthorizeCodeResponse.SerializeToString,
            ),
            'GetToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetToken,
                    request_deserializer=grpcoauth_dot_v1_dot_oauth__pb2.GetTokenRequest.FromString,
                    response_serializer=grpcoauth_dot_v1_dot_oauth__pb2.GetTokenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpcoauth.v1.Oauth2Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('grpcoauth.v1.Oauth2Service', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Oauth2Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAuthorizeCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpcoauth.v1.Oauth2Service/GetAuthorizeCode',
            grpcoauth_dot_v1_dot_oauth__pb2.GetAuthorizeCodeRequest.SerializeToString,
            grpcoauth_dot_v1_dot_oauth__pb2.GetAuthorizeCodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpcoauth.v1.Oauth2Service/GetToken',
            grpcoauth_dot_v1_dot_oauth__pb2.GetTokenRequest.SerializeToString,
            grpcoauth_dot_v1_dot_oauth__pb2.GetTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class OauthCallbackServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Callback = channel.unary_unary(
                '/grpcoauth.v1.OauthCallbackService/Callback',
                request_serializer=grpcoauth_dot_v1_dot_oauth__pb2.CallbackRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class OauthCallbackServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Callback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OauthCallbackServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Callback': grpc.unary_unary_rpc_method_handler(
                    servicer.Callback,
                    request_deserializer=grpcoauth_dot_v1_dot_oauth__pb2.CallbackRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpcoauth.v1.OauthCallbackService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('grpcoauth.v1.OauthCallbackService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OauthCallbackService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Callback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpcoauth.v1.OauthCallbackService/Callback',
            grpcoauth_dot_v1_dot_oauth__pb2.CallbackRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
