# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: grpcoauth/v1/user.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import buf.validate.validate_pb2
import grpcoauth.v1.user_pb2


class UserServiceBase(abc.ABC):

    @abc.abstractmethod
    async def GetUser(self, stream: 'grpclib.server.Stream[grpcoauth.v1.user_pb2.GetUserRequest, grpcoauth.v1.user_pb2.GetUserResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CreateUser(self, stream: 'grpclib.server.Stream[grpcoauth.v1.user_pb2.CreateUserRequest, grpcoauth.v1.user_pb2.CreateUserResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetUserByToken(self, stream: 'grpclib.server.Stream[grpcoauth.v1.user_pb2.GetUserByTokenRequest, grpcoauth.v1.user_pb2.GetUserByTokenResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetUserListByToken(self, stream: 'grpclib.server.Stream[grpcoauth.v1.user_pb2.GetUserListByTokenRequest, grpcoauth.v1.user_pb2.GetUserListByTokenResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/grpcoauth.v1.UserService/GetUser': grpclib.const.Handler(
                self.GetUser,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpcoauth.v1.user_pb2.GetUserRequest,
                grpcoauth.v1.user_pb2.GetUserResponse,
            ),
            '/grpcoauth.v1.UserService/CreateUser': grpclib.const.Handler(
                self.CreateUser,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpcoauth.v1.user_pb2.CreateUserRequest,
                grpcoauth.v1.user_pb2.CreateUserResponse,
            ),
            '/grpcoauth.v1.UserService/GetUserByToken': grpclib.const.Handler(
                self.GetUserByToken,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpcoauth.v1.user_pb2.GetUserByTokenRequest,
                grpcoauth.v1.user_pb2.GetUserByTokenResponse,
            ),
            '/grpcoauth.v1.UserService/GetUserListByToken': grpclib.const.Handler(
                self.GetUserListByToken,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpcoauth.v1.user_pb2.GetUserListByTokenRequest,
                grpcoauth.v1.user_pb2.GetUserListByTokenResponse,
            ),
        }


class UserServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetUser = grpclib.client.UnaryUnaryMethod(
            channel,
            '/grpcoauth.v1.UserService/GetUser',
            grpcoauth.v1.user_pb2.GetUserRequest,
            grpcoauth.v1.user_pb2.GetUserResponse,
        )
        self.CreateUser = grpclib.client.UnaryUnaryMethod(
            channel,
            '/grpcoauth.v1.UserService/CreateUser',
            grpcoauth.v1.user_pb2.CreateUserRequest,
            grpcoauth.v1.user_pb2.CreateUserResponse,
        )
        self.GetUserByToken = grpclib.client.UnaryUnaryMethod(
            channel,
            '/grpcoauth.v1.UserService/GetUserByToken',
            grpcoauth.v1.user_pb2.GetUserByTokenRequest,
            grpcoauth.v1.user_pb2.GetUserByTokenResponse,
        )
        self.GetUserListByToken = grpclib.client.UnaryUnaryMethod(
            channel,
            '/grpcoauth.v1.UserService/GetUserListByToken',
            grpcoauth.v1.user_pb2.GetUserListByTokenRequest,
            grpcoauth.v1.user_pb2.GetUserListByTokenResponse,
        )
